/* eslint-disable no-case-declarations */
import { fileURLToPath } from 'url';
import path, { dirname } from "path";
import { Menubar, menubar as createMenubar } from 'menubar';
import { app, BrowserWindow, shell } from 'electron';
import fs from "fs/promises";
import jsonwebtoken from "jsonwebtoken"

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const isMainModule = require.main === module
const repoRoot = path.resolve(__dirname, '../../')
const menubarDir = path.join(repoRoot, './src/menubar')
const trayIcon = path.join(repoRoot, './src/menubar/IconTemplate.png')
const trayIndex = path.join(repoRoot, './src/menubar/index.html')
const getInfo = async () => ({
  __dirname,
  __filename,
  repoRoot,
  menubarDir,
  trayIcon,
  trayIndex,
  MAIN_WINDOW_WEBPACK_ENTRY,
  MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
  env: process.env,
})

async function main() {
  console.log('starting InteroperatingMenuApp')
  const runId = Math.random().toString().slice(2)
  const app = InteroperatingMenuApp.start()
  console.log('started InteroperatingMenuApp')
}

const defaultAssetsMenubarDir = path.join(__dirname, 'menubar/assets')
console.log('defaultAssetsMenubarDir', defaultAssetsMenubarDir)
class InteroperatingMenuApp {
  static start = () => {
    return new InteroperatingMenuApp
  }
  protected constructor(
    public menubar = createMenubar({
      dir: defaultAssetsMenubarDir,
    })
  ) {
    this.initialize();
  }
  protected initialize = () => {
    const { menubar } = this;
    const { app } = menubar
    // runMainWindow(mb.app)
    this.menubar.on('ready', () => {
      console.log('menubar is ready');
      // your app code here
      setAsDefaultProtocolClient(app)
      handleOpenUrl(menubar)
    });
    // runMainWindow(app)
  }
}

function setAsDefaultProtocolClient(app: Menubar['app'], protocol='openid') {
  console.log('pre app.setAsDefaultProtocolClient')
  const didSet = app.setAsDefaultProtocolClient(protocol)
  console.log('post app.setAsDefaultProtocolClient', didSet)
}

function handleOpenUrl(mb: Menubar) {
  mb.app.on('open-url', function (event, data) {
    event.preventDefault();
    console.log('open-url ', data)
    const url = new URL(data);
    switch (url.protocol) {
      case 'openid:':
        const idToken = jsonwebtoken.sign(
          {
            iss: 'did:web:bengo.is',
            sub: 'did:web:bengo.is',
            "https://www.w3.org/TR/activitypub/": "activitypub://",
          },
          'secret',
        )
        console.log('handling openid SIOP URL', url.toString());
        const oidcRequest = {
          redirectUri: url.searchParams.get('redirect_uri'),
        }
        console.log({ oidcRequest })
        const respondToRedirectUri = new URL(oidcRequest.redirectUri)
        respondToRedirectUri.hash = `id_token=${idToken}`
        shell.openExternal(respondToRedirectUri.toString())
        // mb.showWindow()
        break;
    }
  });
}


function runMainWindow(app: Electron.App) {
  // This method will be called when Electron has finished
  // initialization and is ready to create browser windows.
  // Some APIs can only be used after this event occurs.
  app.on('ready', createWindow);

  // Quit when all windows are closed, except on macOS. There, it's common
  // for applications and their menu bar to stay active until the user quits
  // explicitly with Cmd + Q.
  app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
      app.quit();
    }
  });

  app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow();
    }
  });

  function createWindow (): void {
    // Create the browser window.
    const mainWindow = new BrowserWindow({
      height: 600,
      width: 800,
      webPreferences: {
        preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      },
    });

    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  }

}

if (isMainModule) {
  main()
}
